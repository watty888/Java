/*
Find top favorited movies among friends
Implement MoviesAnalyzer#topFavouriteMoviesAmongFriends method that will return an array of top three movie titles, that have been most favourited by friends of a given user.

If there are no such movies, then an empty list should be returned or as many movies as possible.

Movies that have equal favourite count, should be ordered alphabetically.

Example output

Your implementation should return following output for userId=62289 for example data:

["The Dark Knight", "The Godfather", "Pulp Fiction"]
In the example above, user with id 62289 has two friends: user with id=15291 and with id=7001.
The Dark Knight and The Godfather movies are favorited by both users, so it will be the most favorited. 
"Pulp Fiction" and "The Shawshank Redemption" are favorited by one of the users, but the Pulp Fiction starts with 
P and will get into top 3 movies, instead of "The Shawshank Redemption"    
*/

package com.parse_json.parse_json;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class MoviesAnalyzer {

    @Override
	public String toString() {
		return "MoviesAnalyzer [movies=" + movies + ", users=" + users + "]\n";
	}

	static class Movie {
        String title;
        String duration;
        List<String> actors;
        List<Integer> watchlist;
        @Override
		public String toString() {
			return "Movie [title=" + title + "\n duration=" + duration + "\n actors=" + actors + "\n watchlist="
					+ watchlist + "\n favorites=" + favorites + "\n ratings=" + ratings + "]\n";
		}
		List<Integer> favorites;
        List<Rating> ratings;
    }

    static class Rating {
        int userId;
        int rating;
		@Override
		public String toString() {
			return "Rating [userId=" + userId + ", rating=" + rating + "]\n";
		}
    }

    static class User {
        int userId;
        String email;
        @Override
		public String toString() {
			return "User [userId=" + userId + ", email=" + email + ", friends=" + friends + "]\n";
		}
		List<Integer> friends;
    }

    List<Movie> movies;
    List<User> users;

    public MoviesAnalyzer(List<Movie> movies, List<User> users) {
        this.movies = movies;
        this.users = users;
    }

    public List<String> topFavouriteMoviesAmongFriends(int userId) {

        

        return new ArrayList<>();
    }
    
}

